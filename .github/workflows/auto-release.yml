name: Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - 'docs/**'

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
    
    # Determine next version based on existing tags
    - name: Get next version
      id: version
      run: |
        # Get the latest tag, default to 0.0.0 if no tags exist
        LATEST_TAG=$(git tag -l --sort=-version:refname | head -n1)
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="0.0.0"
        fi
        
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version parts
        IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
        
        # Determine version bump type based on commit messages
        COMMITS=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD 2>/dev/null || git log --pretty=format:"%s")
        
        if echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?!:|^BREAKING CHANGE:|breaking:"; then
          # Major version bump for breaking changes
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?:"; then
          # Minor version bump for new features
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          # Patch version bump for fixes and other changes
          PATCH=$((PATCH + 1))
        fi
        
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
    
    # Update pom.xml version temporarily (only for build, not committed)
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false
        echo "Updated pom.xml to version ${{ steps.version.outputs.version }}"
    
    # Run tests and build
    - name: Run tests and build
      run: mvn clean test -B
      env:
        MAVEN_OPTS: "-Xmx2048m"
    
    # Build JAR artifact
    - name: Build release artifact
      run: mvn clean package -DskipTests -B
      env:
        MAVEN_OPTS: "-Xmx2048m"
    
    # Generate changelog
    - name: Generate changelog
      id: changelog
      run: |
        LATEST_TAG=$(git tag -l --sort=-version:refname | head -n1)
        if [ -z "$LATEST_TAG" ]; then
          # First release - include all commits
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" --reverse)
        else
          # Get commits since last tag
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" ${LATEST_TAG}..HEAD)
        fi
        
        # Create changelog with sections
        cat > CHANGELOG.md << EOF
        ## What's Changed
        
        $CHANGELOG
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${{ steps.version.outputs.tag }}
        EOF
        
        echo "Generated changelog"
        cat CHANGELOG.md
    
    # Create GitHub Release
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          ./target/base-springboot-api-kotlin-${{ steps.version.outputs.version }}.jar
          ./target/base-springboot-api-kotlin-${{ steps.version.outputs.version }}.jar.original
          ./target/site/jacoco/jacoco.xml
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Cleanup - pom.xml will remain unchanged in repo
    - name: Cleanup
      run: |
        echo "Build completed successfully!"
        echo "Release ${{ steps.version.outputs.version }} created with tag ${{ steps.version.outputs.tag }}"
        echo "pom.xml version changes were temporary and not committed to repository"
